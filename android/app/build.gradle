plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def properties = new Properties()
rootProject.file("local.properties").withInputStream { properties.load(it) }
def appStoreFile = rootProject.file(properties.getProperty("flutter.storeFile"))
def appStorePassword = properties.getProperty("flutter.storePassword")
def appKeyAlias =properties.getProperty("flutter.keyAlias")
def appKeyPassword = properties.getProperty("flutter.keyPassword")

android {
    namespace = "com.guozhigq.pilipala"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "me.qiaobo.pilipala"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            storeFile appStoreFile
            storePassword appStorePassword
            keyAlias appKeyAlias
            keyPassword appKeyPassword
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFiles rootProject.file('proguard-rules.pro')
            signingConfig signingConfigs.release
        }
    }

}

flutter {
    source '../..'
}
